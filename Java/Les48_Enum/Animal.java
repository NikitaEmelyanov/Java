package Java.Les48_Enum;

public enum Animal {
    //Для создания Enum при создании нового класса выбираем enum, так же если изначально был
    //создан класс можно заменить class на enum и все будет работать корректно
    DOG("Собака"),CAT("Кошка"),FROG("Лягушка");
    //Если в Enum есть что-то кроме перечислений, то после перечислений необходимо поставить ;

    private String translation;

    private Animal(String translation) {
        //Конструкторы в Enum обычно создаются с модификатором доступа private, так как нам не
        //нужно создавать объекты класса Animal вне данного класса, поскольку все объекты
        //класса Animal, в данном случае это DOG, CAT, FROG создаются автоматически самой Java
        //Модификатор доступа private не обязательно писать так как в Enum по умолчанию при
        //создании конструктора стоит модификатор доступа private
        this.translation = translation;

        //Поскольку мы переопределили стандартный конструктор и передали в него аргумент, Java
        //больше не сможет создавать объекты самостоятельно, поскольку у конструктора по
        //умолчанию было пустое поле аргумента, поэтому нужно прописать самостоятельно в скобках
        //наш аргумент, в данном случае это строка перевод на русский язык
        //Animal(){
        //}            - скрытый конструктор по умолчанию
    }
    public String getTranslation(){
        return translation;
        // Теперь мы можем создать метод геттера с возвращением перевода и обратиться к нему
        //через объект
    }
    public String toString(){
        return "Перевод на русский язык " + translation;
        //Поскольку мы наследуем все и от Object и от Enum мы можем переопределять методы
        //данных классов, для этого нужно повторить сигнатуру метода. Например, можем
        //переопределить метод toString класса Object. Метод toString вызывается по
        //умолчанию, когда мы выводим объект на экран
    }
}
