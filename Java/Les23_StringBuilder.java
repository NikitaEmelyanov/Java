package Java;

public class Les23_StringBuilder {
    public static void main(String[] args) {
        //Урок 23: StringBuilder
        //В Java существует 2 вида объектов  Mutable (Изменяемый) и Immutable (Неизменяемый)
        // Тип данных String - Immutable(Неизменяемый)
        String x = "Hello";
        x.toUpperCase();
        //.toUpperCase - метод, чтобы сделать все буквы в переменной String ЗАГЛАВНЫМИ
        System.out.println(x);
        //Метод .toUpperCase не влияет на данную строку, а вызывает новую, поэтому метод не сработает
        x = x.toUpperCase();
        //но если переопределить метод и сделать, чтобы он ссылался не на первую переменную (которая
        //уже задана), а ссылался на другую переменную, метод будет работать
        System.out.println(x);
        //Поскольку на первую переменную больше ничего не ссылается, она удалиться через некоторое
        //время из оперативной памяти с помощью сборщика мусора

        // Из этого следует вывод: при работе с Immutable (Неизменяемыми) объектами, нужно помещать
        //результат исполнения методов в переменную

        String string1 = "Hello ";
        String string2 = "my ";
        String string3 = "friend";
        String stringAll = string1 + string2 +string3;
        // При сложении всех переменных в оперативной памяти создаются дополнительные переменные для
        //реализации операции, при том старые переменные так же остаются в оперативной памяти, так как
        //новые объекты в оперативной памяти ссылаются на старые на прямую, следовательно,
        // используется больше ОП чем могло бы. Нельзя использовать при огромном количестве сложений и
        //циклах, так как будет заниматься огромный объем ОП
        System.out.println(stringAll);

        StringBuilder sb = new StringBuilder("Hello");
        // Тип данных StringBuilder - Mutable (Изменяемый), в отличие от String
        // В конструкторе new StringBuilder() можно указать начальное значение, можно не указывать
        System.out.println(sb.toString());
        // Метод .toString() позволяет выводить на экран при использовании StringBuilder()
        // Удобство StringBuilder() в том, что мы можем не создавая новых объектов конкатенировать
        //(прибавить) новые объекты
        sb.append(" my");
        sb.append(" friend");
        //Метод .append позволяет конкатенировать строку к уже имеющийся
        System.out.println(sb.toString());
        //Если есть необходимость большой конкатенации (прибавления строк) нужно использовать
        //StringBuilder(), так как данный тип данных не загружает ОП

        // Так же есть возможность сократить код с помощью Method cheaning, то есть вызывать
        //методы по цепочке друг за другом
        sb.append(" my").append(" friend");
        System.out.println(sb.toString());


        //Урок 23(Продолжение): Форматирование строк
        System.out.print("Hello "); //Метод не переносит следующую строку, а выводит на одной строке
        System.out.println("hello again"); // Метод переносит следующую строку
        System.out.printf("%fThis is a %7d string, %s",0.12 , 1000 ,"NICE \n");
        //Метод .printf - для форматирования строки
        //%s - место куда будет вставлена строка
        //%d - место куда будет вставлено число
        //%f - Место куда будет вставлено чисто типа float
        //Обязательно нужно соблюдать порядок ввода, если в тексте %f .... %d ....%s значения нужно
        //вводить также 0.12, 1000,"Строка"
        //Так же возможно редактировать изменяемые значения, для этого нужно между % и s(d или f)
        //поставить число, которое будет обозначать количество символов в виде отступа. Например, %7d

        System.out.printf("String %-10d \n", 532);
        System.out.printf("String %-10d \n", 5);
        // Если указать отрицательное значение отступа цифры перенесутся в левую часть, а отступ будет
        //после цифр
        System.out.printf("String %10d \n", 100000);
        System.out.printf("String %10d \n", 1000000000);

        // При работе с дробными числами между % и f можно указать количество знаков после запятой, через .
        System.out.printf("String %.1f \n", 45.87357235);
        System.out.printf("String %.2f \n", 45.87357235);
        System.out.printf("String %.3f \n", 45.87357235);
        System.out.printf("String %.4f \n", 45.87357235);
        //Числа не только обрезаются до нужного количества после запятой, но и округляются

    }
}
