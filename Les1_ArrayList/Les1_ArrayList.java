package Les1_ArrayList;


import java.util.ArrayList;
import java.util.List;

public class Les1_ArrayList {
    public static void main(String[] args) {
        //Урок 1: Динамический массив (ArrayList) - Введение

        //При использовании обычного массива мы указываем количество элементов в нем и
        //большее количество элементов чем задекларировано мы не можем добавить
        List<Integer> list = new ArrayList<>();
        //В Java Collection существует конвенция, которая гласит, что лучше ссылаться на
        //интерфейс, который уже реализуется с помощью классов, так как с помощью
        //полиморфизма и Upcasting мы можем использовать реализацию других классов, которые
        //тоже реализуют данный интерфейс

        // при выборе класса в ArrayList нужно использовать <>, а название класса прописать
        // с большой буквы полностью, так как можно использовать только ссылочные типы
        // данных, а не примитивные
        for (int i = 0; i < 10; i++) {
            list.add(i); // Метод для добавления чисел (мы используем цикл, чтобы с
            //сразу добавить 10 чисел)
        }
        System.out.println(list);

        System.out.println(list.get(0));
        System.out.println(list.get(9));
        //.get(1) метод показывает элемент который указан под индексом в ()

        System.out.println(list.size());
        //.size() метод показывающий количество элементов в массиве ArrayList

        // Для перебора всех чисел в массиве ArrayList можно использовать цикл for или
        //цикл for each или лямбда функции (отдельный урок)
        for (int i = 0; i < list.size(); i++) {
            System.out.println(list.get(i));
        }
        for (Integer x: list)
            System.out.print(x + " ");

        list.remove(5);
        //.remove метод для удаления элемента под индексом в (), соответственно массив
        //становиться короче, так как убирается один элемент, остальные элементы смещаются
        //влево, заменяя удаленный элемент следующими, если потребуется много удалений лучше
        //использовать LinkedList

         list.clear();
        // .clear() метод для удаления всех элементов массива
        System.out.println(list);
        }

}
// Коллекции удобнее относительно одномерных и многомерных массивов, но с точки зрения
// производительности проигрывают массивам, по этому если есть возможность использовать
// массивы, используем их, если нет используем ArrayList

//Если мы используем считывания листа и добавление элементов в конец листа, то лучше
//использовать ArrayList а не LinkedList